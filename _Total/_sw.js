
// TODO: 20210418: Service-Worker needs to be finished & tested


/* --------------------------- ServiceWorker ---------------------------- */

// Note: This serviceworker works on Total.HTM, not the release. 
// The release-one is auto-generated by MAKE, including all the assets used in fact 
// 
// This serviceworker has the goal to provide offline-admin-editing to those who have access to Total.HTM
// It does not include assects like language flags, because then the service-worker breaks in case e.g. somebody
// deleted a language-flag. 
//
//

var CAN = "total_htm_easy";   // cache name
var AS = // primary assets, static and public ones   
[
"_HTM/Total.HTM",
"js/_sys/global.js",
"css_sys/01_system.css",
"css_sys/02_content.css",
"css_sys/03_lang.css",
"css_sys/04_topline.css",
"css_sys/11_box.css",
"css_sys/12_slider.css",
"css_sys/21_font_default.css",
"css_sys/22_color_default.css",
"css_sys/28_layout_screen.css",
"css_sys/71_menu.css",
"css_sys/72_msg.css",
"css_sys/73_tab.css",
"css_sys/74_form_basic.css",
"css_sys/75_popup.css",
"css_sys/76_lightbox.css",
"css_sys/101_login.css",
"css/31_font.css",
"css/33_X.css",
"js/setting.js",
"js/_sys/init.js",
"js/X.js",
"js/lang.js",
"js/_sys/sys_util.js",
"js/_sys/slider.js",
"js/_sys/sys.js",
"js/_sys/total.js",
];


var ASS = // scondary assests, not needed for first impression    
[
"css/theme_light.css",
"css/theme_dark.css",
"css_lazy/form.css",
"js/_lazy/form.js",
"js/_sys/admin.js"
];


// ---------------------------------------------------------------------------
self.addEventListener("install", function(e) 
{
    self.skipWaiting();

    e.waitUntil(async function() 
    {
        const c = await caches.open(CAN);
        await c.addAll(AS);
        c.addAll(ASS);  
    }());
});


// ---------------------------------------------------------------------------
self.addEventListener('fetch', function(e) 
{
    console.log("FETCH Event CID: " + e.clientId + ": ", e.request.url);

    e.respondWith(caches.match(e.request).then(function(r) 
    {
        if (r) return r;
  
        return fetch(e.request).then(function(r) 
        {
            if(r && r.status == 200 || r.type == 'basic' && r.url.length > 3) 
            {
                // the following last 3 chars-check is save if we consider all dynamic calls made to php
                var ext = r.url.substr(r.url.length - 3).toLowerCase();
                switch(ext)
                {
                case "jpg":
                case "peg":   // jpeg
                case "png":
                case "gif":
                case "svg":
                case "off":   // woff  font
                case "css":
                case ".js":
                case "ico":
                case "htm":
                case "tml":   // html
                {
                    rc = r.clone();

                    caches.open(CAN).then(function(c) 
                    {
                        c.add(e.request.url, rc);
                    });    
                    break;
                }
                default:
                {
                    // TODO: Dynamic calls for APP-data-caching with LocalDB
                    console.log("NOT caching: " + r.url);
                }        
                }
            }

            return r;
        });
    }));
});



// ---------------------------------------------------------------------------
self.addEventListener('activate', function(e)   // This is the occational start of service-worker, not the client-session 
{
    clients.claim();  // This shall activate the serviceworker in first page-load

    // TODO: Test delete old cache ... 
    e.waitUntil(caches.keys().then(function(acn) 
    {        
        return Promise.all(acn.map(function(cn) 
        {
            if (CAN.indexOf(cn) === -1) 
            {
                return caches.delete(cn);
            }
        }));
    }));  
});


// ---------------------------------------------------------------------------
function MSG_client(cid, msg)
{
    clients.get(cid).then((c) => 
    {
        if(c) c.postMessage(msg);
        else
        {
            console.log("Got invalid client object, cid: ", cid);
        }
    },
    (err) =>
    {
        console.log("Get client by cid failed, cid: ", cid);
    });
} 


// ---------------------------------------------------------------------------
function MSG(msg)   // This broadcasts to all clients
{
    self.clients.matchAll({includeUncontrolled: true, type: 'window'}).then((ac) => 
    {
        if (ac && ac.length) 
        {
            ac[0].postMessage(msg);
        }        
    });
}

// ---------------------------------------------------------------------------
self.addEventListener('message', function(e) 
{
    if(e.data === "INIT")
    {
        console.log("SW: Got INIT Message. CID: ", e.source.id);
        MSG_client(e.source.id, "INIT-OK");   // This is the start of a client 
        return;
    } 

    console.log("SW: Message input from cid: " + e.source.id,  e.data);
    MSG_client(e.source.id, "OK");
});

